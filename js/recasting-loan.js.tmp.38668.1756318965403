// Recasting Loan Calculator

function createRecastingLoanFields() {
    const fieldsContainer = document.getElementById('inputFields');
    fieldsContainer.innerHTML = '';
    
    // Create synchronized input fields - same as standard loan
    const fields = [
        createSynchronizedInputElement('loanAmount'),
        createSynchronizedInputElement('interestRate'),
        createSynchronizedInputElement('loanTerm'),
        createSynchronizedInputElement('startDate'),
        createSynchronizedInputElement('firstPaymentDate'),
        createSynchronizedInputElement('paymentDueDay'),
        createSynchronizedInputElement('extraPayment')
    ];
    
    fields.forEach(field => {
        if (field) {
            fieldsContainer.appendChild(field);
            const inputElement = field.querySelector('input') || field.querySelector('select');
            if (inputElement) {
                const eventType = inputElement.tagName.toLowerCase() === 'select' ? 'change' : 'input';
                inputElement.addEventListener(eventType, calculateRecastingLoan);
            }
        }
    });
    
    // Calculate initial values
    setTimeout(calculateRecastingLoan, 100);
}

function calculateRecastingLoan() {
    const values = getFormValues(); // Use standard form values function
    
    if (!values.loanAmount || !values.interestRate || !values.loanTerm) {
        return;
    }

    const schedule = generateRecastingAmortizationSchedule(
        values.loanAmount,
        values.interestRate,
        values.loanTerm * 12,
        values.startDate,
        values.firstPaymentDate,
        values.paymentDueDay,
        values.extraPayment
    );
    
    currentSchedule = schedule;
    updateSummary(schedule);
    updateChart(schedule);
    updateScheduleTable(schedule);
}

function getRecastingFormValues() {
    return {
        remainingBalance: getNumericValue('remainingBalance'),
        interestRate: parseFloat(document.getElementById('interestRate')?.value || 0),
        remainingTerm: parseInt(document.getElementById('remainingTerm')?.value || 0),
        lumpSum: getNumericValue('lumpSum'),
        recastFee: getNumericValue('recastFee'),
        startDate: document.getElementById('startDate')?.value || new Date().toISOString().split('T')[0],
        firstPaymentDate: document.getElementById('firstPaymentDate')?.value || (() => {
            const startDate = document.getElementById('startDate')?.value || new Date().toISOString().split('T')[0];
            const start = new Date(startDate);
            const firstPayment = new Date(start.getFullYear(), start.getMonth() + 1, 1);
            return firstPayment.toISOString().split('T')[0];
        })(),
        extraPayment: getNumericValue('extraPayment')
    };
}

function generateRecastingAmortizationSchedule(principal, annualRate, months, startDate, firstPaymentDate, paymentDueDay, extraPayment = 0) {
    const schedule = [];
    let balance = principal;
    const monthlyRate = annualRate / 100 / 12;
    let currentDate = new Date(firstPaymentDate);
    const startDateDay = new Date(startDate).getDate();
    let totalInterest = 0;
    let totalPrincipal = 0;
    
    // Calculate base monthly payment
    const basePayment = calculateMonthlyPayment(principal, annualRate, months);
    
    for (let month = 1; month <= months && balance > 0; month++) {
        const interestPayment = balance * monthlyRate;
        let principalPayment = Math.min(basePayment - interestPayment + extraPayment, balance);
        
        const totalPayment = interestPayment + principalPayment;
        balance -= principalPayment;
        
        totalInterest += interestPayment;
        totalPrincipal += principalPayment;
        
        schedule.push({
            month,
            date: formatDate(currentDate),
            payment: totalPayment,
            principal: principalPayment,
            interest: interestPayment,
            balance: Math.max(0, balance),
            totalInterest,
            totalPrincipal,
            rate: annualRate
        });
        
        // Calculate next payment date based on payment due day setting
        if (month < months && balance > 0) {
            currentDate = calculatePaymentDate(startDate, month, paymentDueDay, startDateDay, firstPaymentDate);
        }
        
        if (balance <= 0) break;
    }
    
    return schedule;
}