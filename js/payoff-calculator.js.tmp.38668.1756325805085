// Payoff Calculator

function createPayoffCalculatorFields() {
    const fieldsContainer = document.getElementById('inputFields');
    fieldsContainer.innerHTML = '';
    
    // Create input fields similar to standard loan but with modifications for payoff calculator
    const fields = [
        createSynchronizedInputElement('loanAmount'),
        createSynchronizedInputElement('interestRate'),
        createSynchronizedInputElement('loanTerm'),
        createPayoffPresentBalanceInputElement(),
        createSynchronizedInputElement('startDate'),
        createSynchronizedInputElement('firstPaymentDate'),
        createPayoffDateInputElement(),
        createSynchronizedInputElement('paymentDueDay')
    ];
    
    fields.forEach(field => {
        if (field) {
            fieldsContainer.appendChild(field);
            const inputElements = field.querySelectorAll('input, select');
            inputElements.forEach(inputElement => {
                if (!inputElement.readOnly && !inputElement.disabled) {
                    const eventType = inputElement.tagName.toLowerCase() === 'select' ? 'change' : 'input';
                    inputElement.addEventListener(eventType, calculatePayoffAmount);
                }
            });
        }
    });
    
    // Calculate initial values
    setTimeout(calculatePayoffAmount, 100);
}

function createPayoffPresentBalanceInputElement() {
    return createInputElement('presentBalance', 'number', 'Present Principal Balance ($)', 200000, '', 0, null, 1);
}

function createPayoffDateInputElement() {
    const today = new Date();
    const futureDate = new Date(today.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 days from today
    const defaultPayoffDate = futureDate.toISOString().split('T')[0];
    
    return createInputElement('payoffDate', 'date', 'Payoff Date', defaultPayoffDate, '');
}

function calculatePayoffAmount() {
    const values = getPayoffCalculatorFormValues();
    
    if (!values.presentBalance || !values.interestRate || !values.payoffDate || !values.startDate) {
        return;
    }
    
    // Calculate the payoff amount with daily interest accrual
    const payoffDetails = calculateDailyInterestPayoff(
        values.presentBalance,
        values.interestRate,
        values.startDate,
        values.payoffDate
    );
    
    // Generate a simple schedule showing the payoff calculation
    const schedule = generatePayoffSchedule(
        values.presentBalance,
        values.interestRate,
        values.loanTerm,
        values.startDate,
        values.firstPaymentDate,
        values.payoffDate,
        values.paymentDueDay,
        payoffDetails
    );
    
    currentSchedule = schedule;
    updateSummary(schedule);
    updateChart(schedule);
    updateScheduleTable(schedule);
}

function getPayoffCalculatorFormValues() {
    return {
        loanAmount: getNumericValue('loanAmount'),
        presentBalance: getNumericValue('presentBalance'),
        interestRate: parseFloat(document.getElementById('interestRate')?.value || 0),
        loanTerm: (() => {
            const years = parseInt(document.getElementById('loanTermYears')?.value || 0);
            const months = parseInt(document.getElementById('loanTermMonths')?.value || 0);
            return years + (months / 12);
        })(),
        startDate: document.getElementById('startDate')?.value || new Date().toISOString().split('T')[0],
        firstPaymentDate: document.getElementById('firstPaymentDate')?.value || (() => {
            const startDate = document.getElementById('startDate')?.value || new Date().toISOString().split('T')[0];
            const start = new Date(startDate);
            const firstPayment = new Date(start.getFullYear(), start.getMonth() + 1, 1);
            return firstPayment.toISOString().split('T')[0];
        })(),
        payoffDate: document.getElementById('payoffDate')?.value || new Date().toISOString().split('T')[0],
        paymentDueDay: document.getElementById('paymentDueDay')?.value || 'first'
    };
}

// Calculate daily interest accrual from start date to payoff date
function calculateDailyInterestPayoff(presentBalance, annualRate, startDate, payoffDate) {
    const startDateObj = new Date(startDate);
    const payoffDateObj = new Date(payoffDate);
    
    // Calculate days between start date and payoff date
    const timeDifference = payoffDateObj.getTime() - startDateObj.getTime();
    const daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));
    
    // Calculate daily interest rate
    const dailyRate = (annualRate / 100) / 365;
    
    // Calculate accrued interest using daily compounding
    const accruedInterest = presentBalance * dailyRate * daysDifference;
    
    // Total payoff amount
    const totalPayoffAmount = presentBalance + accruedInterest;
    
    return {
        startDate: startDate,
        payoffDate: payoffDate,
        daysDifference: daysDifference,
        presentBalance: presentBalance,
        dailyRate: dailyRate,
        accruedInterest: accruedInterest,
        totalPayoffAmount: totalPayoffAmount,
        annualRate: annualRate
    };
}

function generatePayoffSchedule(originalLoanAmount, annualRate, loanTermYears, startDate, firstPaymentDate, payoffDate, paymentDueDay, payoffDetails) {
    const schedule = [];
    
    // Parse dates to avoid timezone issues
    const startDateParts = startDate.split('-');
    const payoffDateParts = payoffDate.split('-');
    const currentDate = new Date(parseInt(payoffDateParts[0]), parseInt(payoffDateParts[1]) - 1, parseInt(payoffDateParts[2]));
    
    // Create a single row showing the payoff calculation
    schedule.push({
        month: 1,
        date: formatDate(currentDate),
        payment: payoffDetails.totalPayoffAmount,
        principal: payoffDetails.presentBalance,
        interest: payoffDetails.accruedInterest,
        balance: 0, // Loan is paid off
        totalInterest: payoffDetails.accruedInterest,
        totalPrincipal: payoffDetails.presentBalance,
        rate: annualRate,
        isPayoffCalculation: true,
        payoffDetails: payoffDetails
    });
    
    return schedule;
}

// Override updateSummary for payoff calculator to show different information
function updatePayoffSummary(schedule) {
    if (!schedule || schedule.length === 0) {
        document.getElementById('summarySection').style.display = 'none';
        return;
    }
    
    const payoffRow = schedule[0];
    const payoffDetails = payoffRow.payoffDetails;
    
    const summaryContent = document.getElementById('summaryContent');
    summaryContent.innerHTML = `
        <div class="summary-item">
            <div class="summary-label">Present Principal Balance</div>
            <div class="summary-value primary">${formatCurrency(payoffDetails.presentBalance)}</div>
        </div>
        <div class="summary-item">
            <div class="summary-label">Days to Payoff</div>
            <div class="summary-value dark">${payoffDetails.daysDifference} days</div>
        </div>
        <div class="summary-item">
            <div class="summary-label">Daily Interest Rate</div>
            <div class="summary-value dark">${(payoffDetails.dailyRate * 100).toFixed(6)}%</div>
        </div>
        <div class="summary-item">
            <div class="summary-label">Accrued Interest</div>
            <div class="summary-value danger">${formatCurrency(payoffDetails.accruedInterest)}</div>
        </div>
        <div class="summary-item">
            <div class="summary-label">Total Payoff Amount</div>
            <div class="summary-value success">${formatCurrency(payoffDetails.totalPayoffAmount)}</div>
        </div>
        <div class="summary-item">
            <div class="summary-label">Payoff Date</div>
            <div class="summary-value dark">${payoffRow.date}</div>
        </div>
    `;
    
    document.getElementById('summarySection').style.display = 'block';
}

// Override the standard updateSummary when in payoff calculator mode
function updateSummary(schedule) {
    if (currentLoanType === 'payoff-calculator') {
        updatePayoffSummary(schedule);
    } else {
        // Call the original updateSummary function from utils.js
        updateStandardSummary(schedule);
    }
}

// Backup the original updateSummary function
if (typeof updateStandardSummary === 'undefined') {
    window.updateStandardSummary = window.updateSummary;
}