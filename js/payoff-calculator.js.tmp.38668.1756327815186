// Payoff Calculator

function createPayoffCalculatorFields() {
    const fieldsContainer = document.getElementById('inputFields');
    fieldsContainer.innerHTML = '';
    
    // Create input fields similar to standard loan but with modifications for payoff calculator
    const fields = [
        createSynchronizedInputElement('loanAmount'),
        createSynchronizedInputElement('interestRate'),
        createSynchronizedInputElement('loanTerm'),
        createPayoffPresentBalanceInputElement(),
        createSynchronizedInputElement('startDate'),
        createSynchronizedInputElement('firstPaymentDate'),
        createPayoffDateInputElement(),
        createSynchronizedInputElement('paymentDueDay')
    ];
    
    fields.forEach(field => {
        if (field) {
            fieldsContainer.appendChild(field);
            const inputElements = field.querySelectorAll('input, select');
            inputElements.forEach(inputElement => {
                if (!inputElement.readOnly && !inputElement.disabled) {
                    const eventType = inputElement.tagName.toLowerCase() === 'select' ? 'change' : 'input';
                    inputElement.addEventListener(eventType, calculatePayoffAmount);
                }
            });
        }
    });
    
    // Calculate initial values
    setTimeout(calculatePayoffAmount, 100);
}

function createPayoffPresentBalanceInputElement() {
    return createInputElement('presentBalance', 'number', 'Present Principal Balance ($)', '', '', 0, null, 1);
}

function createPayoffDateInputElement() {
    const today = new Date();
    const futureDate = new Date(today.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 days from today
    const defaultPayoffDate = futureDate.toISOString().split('T')[0];
    
    return createInputElement('payoffDate', 'date', 'Payoff Date', defaultPayoffDate, '');
}

function calculatePayoffAmount() {
    const values = getPayoffCalculatorFormValues();
    
    if (!values.presentBalance || !values.interestRate || !values.payoffDate || !values.startDate) {
        return;
    }
    
    // Calculate the payoff amount with daily interest accrual
    const payoffDetails = calculateDailyInterestPayoff(
        values.presentBalance,
        values.interestRate,
        values.startDate,
        values.payoffDate
    );
    
    // Generate a simple schedule showing the payoff calculation
    const schedule = generatePayoffSchedule(
        values.presentBalance,
        values.interestRate,
        values.loanTerm,
        values.startDate,
        values.firstPaymentDate,
        values.payoffDate,
        values.paymentDueDay,
        payoffDetails
    );
    
    currentSchedule = schedule;
    updatePayoffSummary(schedule);
    updateChart(schedule);
    updateScheduleTable(schedule);
}

function getPayoffCalculatorFormValues() {
    return {
        loanAmount: getNumericValue('loanAmount'),
        presentBalance: getNumericValue('presentBalance'),
        interestRate: parseFloat(document.getElementById('interestRate')?.value || 0),
        loanTerm: (() => {
            const years = parseInt(document.getElementById('loanTermYears')?.value || 0);
            const months = parseInt(document.getElementById('loanTermMonths')?.value || 0);
            return years + (months / 12);
        })(),
        startDate: document.getElementById('startDate')?.value || new Date().toISOString().split('T')[0],
        firstPaymentDate: document.getElementById('firstPaymentDate')?.value || (() => {
            const startDate = document.getElementById('startDate')?.value || new Date().toISOString().split('T')[0];
            const start = new Date(startDate);
            const firstPayment = new Date(start.getFullYear(), start.getMonth() + 1, 1);
            return firstPayment.toISOString().split('T')[0];
        })(),
        payoffDate: document.getElementById('payoffDate')?.value || new Date().toISOString().split('T')[0],
        paymentDueDay: document.getElementById('paymentDueDay')?.value || 'first'
    };
}

// Calculate daily interest accrual from today to payoff date
function calculateDailyInterestPayoff(presentBalance, annualRate, startDate, payoffDate) {
    // For payoff calculations, we calculate from today to the payoff date, not from original start date
    const today = new Date();
    const payoffDateObj = new Date(payoffDate);
    
    // Calculate days between today and payoff date
    const timeDifference = payoffDateObj.getTime() - today.getTime();
    const daysDifference = Math.max(0, Math.ceil(timeDifference / (1000 * 3600 * 24)));
    
    // Calculate daily interest rate
    const dailyRate = (annualRate / 100) / 365;
    
    // Calculate daily interest amount in dollars
    const dailyInterestAmount = presentBalance * dailyRate;
    
    // Calculate accrued interest using simple daily interest (not compounding for payoff calculations)
    const accruedInterest = dailyInterestAmount * daysDifference;
    
    // Total payoff amount
    const totalPayoffAmount = presentBalance + accruedInterest;
    
    return {
        startDate: startDate,
        payoffDate: payoffDate,
        daysDifference: daysDifference,
        presentBalance: presentBalance,
        dailyRate: dailyRate,
        dailyInterestAmount: dailyInterestAmount,
        accruedInterest: accruedInterest,
        totalPayoffAmount: totalPayoffAmount,
        annualRate: annualRate,
        calculationFromDate: today.toISOString().split('T')[0] // Store when calculation was made from
    };
}

function generatePayoffSchedule(originalLoanAmount, annualRate, loanTermYears, startDate, firstPaymentDate, payoffDate, paymentDueDay, payoffDetails) {
    // Generate the full standard amortization schedule first
    const fullSchedule = generateStandardAmortizationSchedule(
        originalLoanAmount,
        annualRate,
        loanTermYears,
        startDate,
        firstPaymentDate,
        paymentDueDay,
        0 // no extra payment for calculating standard balance
    );
    
    // Find today's date to determine current payment position
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    
    // Find the payment that would be due today or the next payment after today
    let currentPaymentIndex = 0;
    for (let i = 0; i < fullSchedule.length; i++) {
        const paymentDate = new Date(fullSchedule[i].date);
        if (paymentDate <= today) {
            currentPaymentIndex = i;
        } else {
            break;
        }
    }
    
    // The present balance should be the balance after the last payment that was due
    const calculatedPresentBalance = currentPaymentIndex > 0 ? 
        fullSchedule[currentPaymentIndex].balance : 
        originalLoanAmount;
    
    // Update the present balance field if it's not manually set
    const presentBalanceElement = document.getElementById('presentBalance');
    if (presentBalanceElement && (!presentBalanceElement.value || presentBalanceElement.value == 200000)) {
        presentBalanceElement.value = calculatedPresentBalance.toFixed(2);
        // Trigger recalculation with the new present balance
        setTimeout(() => calculatePayoffAmount(), 100);
        return fullSchedule; // Return early to avoid double calculation
    }
    
    // Add a final payoff payment to the schedule
    const payoffDateParts = payoffDate.split('-');
    const payoffDateObj = new Date(parseInt(payoffDateParts[0]), parseInt(payoffDateParts[1]) - 1, parseInt(payoffDateParts[2]));
    
    // Add the payoff payment as the final entry
    const finalPayment = {
        month: fullSchedule.length + 1,
        date: formatDate(payoffDateObj),
        payment: payoffDetails.totalPayoffAmount,
        principal: payoffDetails.presentBalance,
        interest: payoffDetails.accruedInterest,
        balance: 0, // Loan is paid off
        totalInterest: (fullSchedule[fullSchedule.length - 1]?.totalInterest || 0) + payoffDetails.accruedInterest,
        totalPrincipal: originalLoanAmount,
        rate: annualRate,
        isPayoffCalculation: true,
        payoffDetails: payoffDetails
    };
    
    fullSchedule.push(finalPayment);
    
    return fullSchedule;
}

// Override updateSummary for payoff calculator to show different information
function updatePayoffSummary(schedule) {
    if (!schedule || schedule.length === 0) {
        document.getElementById('summarySection').style.display = 'none';
        return;
    }
    
    // Find the payoff calculation row (should be the last one with payoffDetails)
    const payoffRow = schedule.find(row => row.isPayoffCalculation && row.payoffDetails) || schedule[schedule.length - 1];
    const payoffDetails = payoffRow?.payoffDetails;
    
    if (!payoffDetails) {
        document.getElementById('summarySection').style.display = 'none';
        return;
    }
    
    const summaryContent = document.getElementById('summaryContent');
    summaryContent.innerHTML = `
        <div class="summary-item">
            <div class="summary-label">Present Principal Balance</div>
            <div class="summary-value primary">${formatCurrency(payoffDetails.presentBalance)}</div>
        </div>
        <div class="summary-item">
            <div class="summary-label">Days to Payoff</div>
            <div class="summary-value dark">${payoffDetails.daysDifference} days</div>
        </div>
        <div class="summary-item">
            <div class="summary-label">Daily Interest Rate</div>
            <div class="summary-value dark">${(payoffDetails.dailyRate * 100).toFixed(6)}%</div>
        </div>
        <div class="summary-item">
            <div class="summary-label">Daily Interest Amount</div>
            <div class="summary-value dark">${formatCurrency(payoffDetails.dailyInterestAmount)}</div>
        </div>
        <div class="summary-item">
            <div class="summary-label">Accrued Interest</div>
            <div class="summary-value danger">${formatCurrency(payoffDetails.accruedInterest)}</div>
        </div>
        <div class="summary-item">
            <div class="summary-label">Total Payoff Amount</div>
            <div class="summary-value success">${formatCurrency(payoffDetails.totalPayoffAmount)}</div>
        </div>
        <div class="summary-item">
            <div class="summary-label">Payoff Date</div>
            <div class="summary-value dark">${payoffRow.date}</div>
        </div>
    `;
    
    document.getElementById('summarySection').style.display = 'block';
}

